name: ROS CI with Coverage

on:
  push:

jobs:
  ros_ci:
    runs-on: ubuntu-22.04
    container:
      image: ros:humble-ros-base
    steps:
      # 1. Check out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Install Python3-pip
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip

      - name: Run custom pre-build script
        run: |
          chmod +x ./requirements.sh
          ./requirements.sh


      # 2. Set up ROS on the runner.
      #    This action installs (and sources) ROS 2 binaries.
      - name: Setup ROS
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: humble
          # You can list more than one distro if needed.

      # 3. Build, test, and generate code coverage.
      #    This step uses action-ros-ci to assemble the workspace,
      #    install dependencies, build the package, run tests, and—using colcon mixins—generate coverage data.
      - name: Build and Test with ROS CI
        uses: ros-tooling/action-ros-ci@v0.3
        with:
          vcs-repo-file-url: dependencies.repos
          # Specify the target ROS 2 distro (adjust if you need a different one)
          target-ros2-distro: humble
          # The following colcon-defaults JSON instructs colcon to use mixins that add the necessary coverage flags
          # for C/C++ (coverage-gcc) and for Python tests (coverage-pytest)
          colcon-defaults: |
            {
              "build": {
                "mixin": ["coverage-gcc", "coverage-pytest"]
              },
              "test": {
                "mixin": ["coverage-pytest"]
              }
            }
          # Pin the mixin repository so that changes upstream won’t unexpectedly break your build.
          colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/b8436aa16c0bdbc01081b12caa253cbf16e0fb82/index.yaml

      - name: Check coverage file size
        run: |
            ls -lh ros_ws/lcov/total_coverage.info || true
            ls -lh ros_ws/coveragepy/.coverage || true
        
      # 4. Upload the generated coverage reports to Codecov.
      #    The action-ros-ci mixins (coverage-gcc and coverage-pytest) generate coverage files at predictable locations:
      #      - C/C++ coverage: ros_ws/lcov/total_coverage.info
      #      - Python coverage:  ros_ws/coveragepy/.coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v1.2.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}   # (only needed for private repositories)
          files: |
            ros_ws/lcov/total_coverage.info
            ros_ws/coveragepy/.coverage
          flags: unittests
          name: codecov-umbrella
